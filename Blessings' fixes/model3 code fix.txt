//Model 3
#pragma region code for model3 
        modelShaderThree.Use();

        // Create Projection Matrix
        glm::mat4 projection_Model3(1.0f);

        //Perspective view
        projection_Model3 = glm::perspective(camera.GetZoom(), (GLfloat)SCREEN_WIDTH / (GLfloat)SCREEN_HEIGHT, 0.1f, 10000.0f);

        // Create the camera movement
        glm::mat4 view_Model3(1.0f);
        view_Model3 = camera.GetViewMatrix();

        // This will get the locations for our pawn matrices
        GLint modelLoc_Model3 = glGetUniformLocation(modelShaderThree.Program, "model");
        GLint viewLoc_Model3 = glGetUniformLocation(modelShaderThree.Program, "view");
        GLint projLoc_Model3 = glGetUniformLocation(modelShaderThree.Program, "projection");

        // Send the locations to the designated shaders
        glUniformMatrix4fv(viewLoc_Model3, 1, GL_FALSE, glm::value_ptr(view_Model1));
        glUniformMatrix4fv(projLoc_Model3, 1, GL_FALSE, glm::value_ptr(projection_Model1));

        // Draw the container
        glBindVertexArray(VOA_Model1);

                // Activate Black Texture
                glActiveTexture(GL_TEXTURE0);
                glBindTexture(GL_TEXTURE_2D, textureModel3);
                glUniform1i(glGetUniformLocation(modelShaderThree.Program, "ourTexture1"), 0);

            // Calculate the model matrix for each object and pass it to the shader before drawing
            glm::mat4 model_Model3(1.0f);
            model_Model3 = glm::translate(model_Model3, modelPos3[0]);
            GLfloat angle = 0.0f;
            model_Model3 = glm::rotate(model_Model3, angle, glm::vec3(1.0f, 0.0f, 0.0f));
            glUniformMatrix4fv(modelLoc_Pawn, 1, GL_FALSE, glm::value_ptr(model_Model3));

            glDrawArrays(GL_TRIANGLES, 0, 3528);
#pragma endregion