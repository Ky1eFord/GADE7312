// Window dimensions
const GLuint WIDTH = 1080, HEIGHT = 1000;

ChessBoard cb = ChessBoard();

// settings
const unsigned int SCR_WIDTH = 1080;
const unsigned int SCR_HEIGHT = 1000;
int useWireframe = 0;
int displayGrayscale = 0;

// camera - give pretty starting point
Camera camera(glm::vec3(67.0f + 300.0f, 627.5f - 250.0f, 169.9f),
    glm::vec3(0.0f, 1.0f, 0.0f),
    -128.1f, -42.4f);
float lastX = SCR_WIDTH / 2.0f;
float lastY = SCR_HEIGHT / 2.0f;

int process_counter = 0;

void processInput(GLFWwindow* window);



//creates pawn 
void Pawn()
{
    //Top sphere
    glm::mat4 model = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 view = glm::mat4(1.0f);
    glm::mat4 projection = glm::mat4(1.0f);
    model = glm::rotate(model, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    model = glm::scale(model, glm::vec3(0.1, 0.1, 0.1));
    model = glm::translate(model, glm::vec3(-3.6f, -7.6f, -4.05f));
    view = glm::translate(view, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projection = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvp1 = projection * view * model;

    unsigned int matricID1 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID1, 1, GL_FALSE, &mvp1[0][0]);

    glPushMatrix();
    GLUquadricObj* sphere = gluNewQuadric();

    gluQuadricDrawStyle(sphere, GLU_FILL);
    gluSphere(sphere, 0.25, 20, 20);

    gluDeleteQuadric(sphere);

    //Cone Base
    glm::mat4 modelCone = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewCone = glm::mat4(1.0f);
    glm::mat4 projectionCone = glm::mat4(1.0f);
    modelCone = glm::rotate(modelCone, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelCone = glm::scale(modelCone, glm::vec3(0.1, 0.1, 0.1));
    modelCone = glm::translate(modelCone, glm::vec3(-3.6f, -7.6f, -5.0f));
    viewCone = glm::translate(viewCone, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionCone = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpCone = projectionCone * viewCone * modelCone;

    unsigned int matricIdCone = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIdCone, 1, GL_FALSE, &mvpCone[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinder = gluNewQuadric();

    gluQuadricDrawStyle(cylinder, GLU_FILL);
    gluCylinder(cylinder, 0.3, 0.0, 1.0, 20, 20);

    gluDeleteQuadric(cylinder);

    //Small Cylinder
    glm::mat4 model3 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 view3 = glm::mat4(1.0f);
    glm::mat4 projection3 = glm::mat4(1.0f);
    model3 = glm::rotate(model3, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    model3 = glm::scale(model3, glm::vec3(0.1, 0.1, 0.1));
    model3 = glm::translate(model3, glm::vec3(-3.6f, -7.6f, -5.0f));
    view3 = glm::translate(view3, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projection3 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvp3 = projection3 * view3 * model3;

    unsigned int matricID3 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID3, 1, GL_FALSE, &mvp3[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinderSmallPawn = gluNewQuadric();

    gluQuadricDrawStyle(cylinderSmallPawn, GLU_FILL);
    gluCylinder(cylinderSmallPawn, 0.33, 0.33, 0.16, 20, 20);

    gluDeleteQuadric(cylinderSmallPawn);
}

void Rook()
{
    // Rook Cone Top
    glm::mat4 modelR2 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewR2 = glm::mat4(1.0f);
    glm::mat4 projectionR2 = glm::mat4(1.0f);
    modelR2 = glm::rotate(modelR2, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelR2 = glm::scale(modelR2, glm::vec3(0.1, 0.1, 0.1));
    modelR2 = glm::translate(modelR2, glm::vec3(-3.6f, -6.7f, -4.9f));
    viewR2 = glm::translate(viewR2, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionR2 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpR2 = projectionR2 * viewR2 * modelR2;

    unsigned int matricIdR2 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIdR2, 1, GL_FALSE, &mvpR2[0][0]);

    glPushMatrix();
    GLUquadricObj* Rcylinder2 = gluNewQuadric();

    gluQuadricDrawStyle(Rcylinder2, GLU_FILL);
    gluCylinder(Rcylinder2, 0.1, 0.3, 1.0, 20, 20);

    gluDeleteQuadric(Rcylinder2);

    // Rook Cone Base
    glm::mat4 modelR = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewR = glm::mat4(1.0f);
    glm::mat4 projectionR = glm::mat4(1.0f);
    modelR = glm::rotate(modelR, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelR = glm::scale(modelR, glm::vec3(0.1, 0.1, 0.1));
    modelR = glm::translate(modelR, glm::vec3(-3.6f, -6.7f, -5.0f));
    viewR = glm::translate(viewR, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionR = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpR = projectionR * viewR * modelR;

    unsigned int matricIdR = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIdR, 1, GL_FALSE, &mvpR[0][0]);

    glPushMatrix();
    GLUquadricObj* Rcylinder = gluNewQuadric();

    gluQuadricDrawStyle(Rcylinder, GLU_FILL);
    gluCylinder(Rcylinder, 0.3, 0.0, 1.0, 20, 20);

    gluDeleteQuadric(Rcylinder);

    //Cylinder
    glm::mat4 model4 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 view4 = glm::mat4(1.0f);
    glm::mat4 projection4 = glm::mat4(1.0f);
    model4 = glm::rotate(model4, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    model4 = glm::scale(model4, glm::vec3(0.1, 0.1, 0.1));
    model4 = glm::translate(model4, glm::vec3(-3.6f, -6.7f, -5.0f));
    view4 = glm::translate(view4, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projection4 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvp4 = projection4 * view4 * model4;

    unsigned int matricID3 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID3, 1, GL_FALSE, &mvp4[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinder = gluNewQuadric();

    gluQuadricDrawStyle(cylinder, GLU_FILL);
    gluCylinder(cylinder, 0.3, 0.2, 1.0, 20, 20);

    gluDeleteQuadric(cylinder);
}

void Knight()
{
    //1st Sphere
    glm::mat4 smodelK2 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 sviewK2 = glm::mat4(1.0f);
    glm::mat4 sprojectionK2 = glm::mat4(1.0f);
    smodelK2 = glm::rotate(smodelK2, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    smodelK2 = glm::scale(smodelK2, glm::vec3(0.1, 0.1, 0.1));
    smodelK2 = glm::translate(smodelK2, glm::vec3(-2.7f, -6.7f, -3.5f));
    sviewK2 = glm::translate(sviewK2, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    sprojectionK2 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 smvpK2 = sprojectionK2 * sviewK2 * smodelK2;

    unsigned int smatricIDK2 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(smatricIDK2, 1, GL_FALSE, &smvpK2[0][0]);

    glPushMatrix();
    GLUquadricObj* topsphereK2 = gluNewQuadric();

    gluQuadricDrawStyle(topsphereK2, GLU_FILL);
    gluSphere(topsphereK2, 0.4, 3, 3);

    gluDeleteQuadric(topsphereK2);

    //cylinder
    glm::mat4 model9 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 view9 = glm::mat4(1.0f);
    glm::mat4 projection9 = glm::mat4(1.0f);
    model9 = glm::rotate(model9, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    model9 = glm::scale(model9, glm::vec3(0.1, 0.1, 0.1));
    model9 = glm::translate(model9, glm::vec3(-2.7f, -6.7f, -5.0f));
    view9 = glm::translate(view9, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projection9 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvp3 = projection9 * view9 * model9;

    unsigned int matricID3 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID3, 1, GL_FALSE, &mvp3[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinder = gluNewQuadric();

    gluQuadricDrawStyle(cylinder, GLU_FILL);
    gluCylinder(cylinder, 0.2, 0.2, 1.0, 20, 20);

    gluDeleteQuadric(cylinder);

    //Cone Base
    glm::mat4 modelBase = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewBase = glm::mat4(1.0f);
    glm::mat4 projectionBase = glm::mat4(1.0f);
    modelBase = glm::rotate(modelBase, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelBase = glm::scale(modelBase, glm::vec3(0.1, 0.1, 0.1));
    modelBase = glm::translate(modelBase, glm::vec3(-2.7f, -6.7f, -5.0f));
    viewBase = glm::translate(viewBase, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionBase = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpBase = projectionBase * viewBase * modelBase;

    unsigned int matricIdBase = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIdBase, 1, GL_FALSE, &mvpBase[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinderBase = gluNewQuadric();

    gluQuadricDrawStyle(cylinderBase, GLU_FILL);
    gluCylinder(cylinderBase, 0.3, 0.0, 1.0, 20, 20);

    gluDeleteQuadric(cylinderBase);

}

void Bishop()
{
    //1st sphere
    glm::mat4 smodel = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 sview = glm::mat4(1.0f);
    glm::mat4 sprojection = glm::mat4(1.0f);
    smodel = glm::rotate(smodel, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    smodel = glm::scale(smodel, glm::vec3(0.1, 0.1, 0.1));
    smodel = glm::translate(smodel, glm::vec3(-1.85f, -6.65f, -3.7f));
    sview = glm::translate(sview, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    sprojection = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 smvp = sprojection * sview * smodel;

    unsigned int smatricID = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(smatricID, 1, GL_FALSE, &smvp[0][0]);

    glPushMatrix();
    GLUquadricObj* topsphere = gluNewQuadric();

    gluQuadricDrawStyle(topsphere, GLU_FILL);
    gluSphere(topsphere, 0.1, 20, 20);

    gluDeleteQuadric(topsphere);
    //2nd sphere
    glm::mat4 model7 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 view7 = glm::mat4(1.0f);
    glm::mat4 projection7 = glm::mat4(1.0f);
    model7 = glm::rotate(model7, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    model7 = glm::scale(model7, glm::vec3(0.1, 0.1, 0.1));
    model7 = glm::translate(model7, glm::vec3(-1.85f, -6.65f, -4.0f));
    view7 = glm::translate(view7, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projection7 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvp7 = projection7 * view7 * model7;

    unsigned int matricID1 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID1, 1, GL_FALSE, &mvp7[0][0]);

    glPushMatrix();
    GLUquadricObj* sphere = gluNewQuadric();

    gluQuadricDrawStyle(sphere, GLU_FILL);
    gluSphere(sphere, 0.25, 20, 20);

    gluDeleteQuadric(sphere);

    //Cylinder
    glm::mat4 model3 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 view3 = glm::mat4(1.0f);
    glm::mat4 projection3 = glm::mat4(1.0f);
    model3 = glm::rotate(model3, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    model3 = glm::scale(model3, glm::vec3(0.1, 0.1, 0.1));
    model3 = glm::translate(model3, glm::vec3(-1.85f, -6.65f, -5.0f));
    view3 = glm::translate(view3, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projection3 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvp3 = projection3 * view3 * model3;

    unsigned int matricID3 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID3, 1, GL_FALSE, &mvp3[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinder = gluNewQuadric();

    gluQuadricDrawStyle(cylinder, GLU_FILL);
    gluCylinder(cylinder, 0.1, 0.1, 1.0, 20, 20);

    gluDeleteQuadric(cylinder);

     //Cone Base
    glm::mat4 modelBase1 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewBase1 = glm::mat4(1.0f);
    glm::mat4 projectionBase1 = glm::mat4(1.0f);
    modelBase1 = glm::rotate(modelBase1, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelBase1 = glm::scale(modelBase1, glm::vec3(0.1, 0.1, 0.1));
    modelBase1 = glm::translate(modelBase1, glm::vec3(-1.85f, -6.65f, -5.0f));
    viewBase1 = glm::translate(viewBase1, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionBase1 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpBase1 = projectionBase1 * viewBase1 * modelBase1;

    unsigned int matricIdBase1 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIdBase1, 1, GL_FALSE, &mvpBase1[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinderBase1 = gluNewQuadric();

    gluQuadricDrawStyle(cylinderBase1, GLU_FILL);
    gluCylinder(cylinderBase1, 0.3, 0.0, 1.0, 20, 20);

    gluDeleteQuadric(cylinderBase1);

}
void Queen()
{
    //1st Sphere
    glm::mat4 smodelQ1 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 sviewQ1 = glm::mat4(1.0f);
    glm::mat4 sprojectionQ1 = glm::mat4(1.0f);
    smodelQ1 = glm::rotate(smodelQ1, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    smodelQ1 = glm::scale(smodelQ1, glm::vec3(0.1, 0.1, 0.1));
    smodelQ1 = glm::translate(smodelQ1, glm::vec3(-1.0f, -6.65f, -3.2f));
    sviewQ1 = glm::translate(sviewQ1, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    sprojectionQ1 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 smvpQ1 = sprojectionQ1 * sviewQ1 * smodelQ1;

    unsigned int smatricIDQ1 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(smatricIDQ1, 1, GL_FALSE, &smvpQ1[0][0]);

    glPushMatrix();
    GLUquadricObj* topsphereQ1 = gluNewQuadric();

    gluQuadricDrawStyle(topsphereQ1, GLU_FILL);
    gluSphere(topsphereQ1, 0.15, 20, 20);

    gluDeleteQuadric(topsphereQ1);

    //2nd sphere
    glm::mat4 smodelQ = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 sviewQ = glm::mat4(1.0f);
    glm::mat4 sprojectionQ = glm::mat4(1.0f);
    smodelQ = glm::rotate(smodelQ, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    smodelQ = glm::scale(smodelQ, glm::vec3(0.1, 0.1, 0.1));
    smodelQ = glm::translate(smodelQ, glm::vec3(-1.0f, -6.65f, -3.5f));
    sviewQ = glm::translate(sviewQ, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    sprojectionQ = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 smvpQ = sprojectionQ * sviewQ * smodelQ;

    unsigned int smatricIDQ = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(smatricIDQ, 1, GL_FALSE, &smvpQ[0][0]);

    glPushMatrix();
    GLUquadricObj* topsphereQ = gluNewQuadric();

    gluQuadricDrawStyle(topsphereQ, GLU_FILL);
    gluSphere(topsphereQ, 0.22, 20, 20);

    gluDeleteQuadric(topsphereQ);

    //3rd sphere
    glm::mat4 Qmodel7 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 Qview7 = glm::mat4(1.0f);
    glm::mat4 Qprojection7 = glm::mat4(1.0f);
    Qmodel7 = glm::rotate(Qmodel7, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    Qmodel7 = glm::scale(Qmodel7, glm::vec3(0.1, 0.1, 0.1));
    Qmodel7 = glm::translate(Qmodel7, glm::vec3(-1.005f, -6.65f, -4.5f));
    Qview7 = glm::translate(Qview7, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    Qprojection7 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 Qmvp7 = Qprojection7 * Qview7 * Qmodel7;

    unsigned int matricID1 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID1, 1, GL_FALSE, &Qmvp7[0][0]);

    glPushMatrix();
    GLUquadricObj* Qsphere = gluNewQuadric();

    gluQuadricDrawStyle(Qsphere, GLU_FILL);
    gluSphere(Qsphere, 0.23, 20, 20);

    gluDeleteQuadric(Qsphere);

    //top Cylinder
    glm::mat4 modelQ = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewQ = glm::mat4(1.0f);
    glm::mat4 projectionQ = glm::mat4(1.0f);
    modelQ = glm::rotate(modelQ, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelQ = glm::scale(modelQ, glm::vec3(0.1, 0.1, 0.1));
    modelQ = glm::translate(modelQ, glm::vec3(-1.f, -6.65f, -4.6f));
    viewQ = glm::translate(viewQ, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionQ = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpQ = projectionQ * viewQ * modelQ;

    unsigned int matricIDQ = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIDQ, 1, GL_FALSE, &mvpQ[0][0]);

    glPushMatrix();
    GLUquadricObj* Qcylinder = gluNewQuadric();

    gluQuadricDrawStyle(Qcylinder, GLU_FILL);
    gluCylinder(Qcylinder, 0.1, 0.25, 1.0, 20, 20);

    gluDeleteQuadric(Qcylinder);

    //mid Cylinder
    glm::mat4 model5 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 view5 = glm::mat4(1.0f);
    glm::mat4 projection5 = glm::mat4(1.0f);
    model5 = glm::rotate(model5, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    model5 = glm::scale(model5, glm::vec3(0.1, 0.1, 0.1));
    model5 = glm::translate(model5, glm::vec3(-1.f, -6.65f, -5.0f));
    view5 = glm::translate(view5, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projection5 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvp5 = projection5 * view5 * model5;

    unsigned int matricID3 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID3, 1, GL_FALSE, &mvp5[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinder = gluNewQuadric();

    gluQuadricDrawStyle(cylinder, GLU_FILL);
    gluCylinder(cylinder, 0.2, 0.1, 1.0, 20, 20);

    gluDeleteQuadric(cylinder);

    //Cone Base
    glm::mat4 modelBase2 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewBase2 = glm::mat4(1.0f);
    glm::mat4 projectionBase2 = glm::mat4(1.0f);
    modelBase2 = glm::rotate(modelBase2, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelBase2 = glm::scale(modelBase2, glm::vec3(0.1, 0.1, 0.1));
    modelBase2 = glm::translate(modelBase2, glm::vec3(-1.0f, -6.65f, -5.0f));
    viewBase2 = glm::translate(viewBase2, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionBase2 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpBase2 = projectionBase2 * viewBase2 * modelBase2;

    unsigned int matricIdBase2 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIdBase2, 1, GL_FALSE, &mvpBase2[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinderBase2 = gluNewQuadric();

    gluQuadricDrawStyle(cylinderBase2, GLU_FILL);
    gluCylinder(cylinderBase2, 0.3, 0.0, 1.0, 20, 20);

    gluDeleteQuadric(cylinderBase2);
}

void King()
{
    //1st Sphere
    glm::mat4 smodelK1 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 sviewK1 = glm::mat4(1.0f);
    glm::mat4 sprojectionK1 = glm::mat4(1.0f);
    smodelK1 = glm::rotate(smodelK1, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    smodelK1 = glm::scale(smodelK1, glm::vec3(0.1, 0.1, 0.1));
    smodelK1 = glm::translate(smodelK1, glm::vec3(0.05f, -6.65f, -3.0f));
    sviewK1 = glm::translate(sviewK1, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    sprojectionK1 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 smvpK1 = sprojectionK1 * sviewK1 * smodelK1;

    unsigned int smatricIDK1 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(smatricIDK1, 1, GL_FALSE, &smvpK1[0][0]);

    glPushMatrix();
    GLUquadricObj* topsphereK1 = gluNewQuadric();

    gluQuadricDrawStyle(topsphereK1, GLU_FILL);
    gluSphere(topsphereK1, 0.22, 20, 20);

    gluDeleteQuadric(topsphereK1);

    //2nd sphere
    glm::mat4 smodelK = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 sviewK = glm::mat4(1.0f);
    glm::mat4 sprojectionK = glm::mat4(1.0f);
    smodelK = glm::rotate(smodelK, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    smodelK = glm::scale(smodelK, glm::vec3(0.1, 0.1, 0.1));
    smodelK = glm::translate(smodelK, glm::vec3(0.05f, -6.65f, -3.5f));
    sviewK = glm::translate(sviewK, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    sprojectionK = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 smvpK = sprojectionK * sviewK * smodelK;

    unsigned int smatricIDQ = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(smatricIDQ, 1, GL_FALSE, &smvpK[0][0]);

    glPushMatrix();
    GLUquadricObj* topsphereK = gluNewQuadric();

    gluQuadricDrawStyle(topsphereK, GLU_FILL);
    gluSphere(topsphereK, 0.22, 20, 20);

    gluDeleteQuadric(topsphereK);

    //3rd sphere
    glm::mat4 Kmodel7 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 Kview7 = glm::mat4(1.0f);
    glm::mat4 Kprojection7 = glm::mat4(1.0f);
    Kmodel7 = glm::rotate(Kmodel7, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    Kmodel7 = glm::scale(Kmodel7, glm::vec3(0.1, 0.1, 0.1));
    Kmodel7 = glm::translate(Kmodel7, glm::vec3(0.05f, -6.65f, -4.5f));
    Kview7 = glm::translate(Kview7, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    Kprojection7 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 Qmvp7 = Kprojection7 * Kview7 * Kmodel7;

    unsigned int matricID1 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID1, 1, GL_FALSE, &Qmvp7[0][0]);

    glPushMatrix();
    GLUquadricObj* Ksphere = gluNewQuadric();

    gluQuadricDrawStyle(Ksphere, GLU_FILL);
    gluSphere(Ksphere, 0.23, 20, 20);

    gluDeleteQuadric(Ksphere);

    //top Cylinder
    glm::mat4 modelK = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewK = glm::mat4(1.0f);
    glm::mat4 projectionK = glm::mat4(1.0f);
    modelK = glm::rotate(modelK, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelK = glm::scale(modelK, glm::vec3(0.1, 0.1, 0.1));
    modelK = glm::translate(modelK, glm::vec3(0.05f, -6.65f, -4.6f));
    viewK = glm::translate(viewK, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionK = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpK = projectionK * viewK * modelK;

    unsigned int matricIDK = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIDK, 1, GL_FALSE, &mvpK[0][0]);

    glPushMatrix();
    GLUquadricObj* Kcylinder = gluNewQuadric();

    gluQuadricDrawStyle(Kcylinder, GLU_FILL);
    gluCylinder(Kcylinder, 0.1, 0.25, 1.0, 20, 20);

    gluDeleteQuadric(Kcylinder);

    //Cylinder
    glm::mat4 model8 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 view8 = glm::mat4(1.0f);
    glm::mat4 projection8 = glm::mat4(1.0f);
    model8 = glm::rotate(model8, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    model8 = glm::scale(model8, glm::vec3(0.1, 0.1, 0.1));
    model8 = glm::translate(model8, glm::vec3(0.05f, -6.65f, -5.0f));
    view8 = glm::translate(view8, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projection8 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvp8 = projection8 * view8 * model8;

    unsigned int matricID3 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricID3, 1, GL_FALSE, &mvp8[0][0]);

    glPushMatrix();
    GLUquadricObj* cylinder = gluNewQuadric();

    gluQuadricDrawStyle(cylinder, GLU_FILL);
    gluCylinder(cylinder, 0.3, 0.1, 1.0, 20, 20);

    gluDeleteQuadric(cylinder);

    //top cross
    glm::mat4 modelK2 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
    glm::mat4 viewK2 = glm::mat4(1.0f);
    glm::mat4 projectionK2 = glm::mat4(1.0f);
    modelK2 = glm::rotate(modelK2, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
    modelK2 = glm::scale(modelK2, glm::vec3(0.1, 0.1, 0.1));
    modelK2 = glm::translate(modelK2, glm::vec3(0.05f, -6.65f, -3.0f));
    viewK2 = glm::translate(viewK2, glm::vec3(0.5f, 1.0f, -3.0f));// DON'T CHANGE 
    projectionK2 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

    glm::mat4 mvpK2 = projectionK2 * viewK2 * modelK2;

    unsigned int matricIDK2 = glGetUniformLocation(cb.getShaderProgram(), "MVP");
    glUniformMatrix4fv(matricIDK2, 1, GL_FALSE, &mvpK2[0][0]);

    glPushMatrix();
    GLUquadricObj* Kcylinder2 = gluNewQuadric();

    gluQuadricDrawStyle(Kcylinder2, GLU_FILL);
    gluCylinder(Kcylinder2, 0.1, 0.2, 0.5, 20, 20);
    gluDeleteQuadric(Kcylinder2);



}
// The MAIN function, from here we start the application and run the game loop
int main()
{
    glfwInit();
   /* glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);*/

    glfwWindowHint(GLFW_SAMPLES, 4);

    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);

    // Create a GLFWwindow object that we can use for GLFW's functions
    GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "GADE7311_TASK_1_FULL_SEND", nullptr, nullptr);

    int screenWidth, screenHeight;
    //callback everytime the window has been resized
    glfwGetFramebufferSize(window, &screenWidth, &screenHeight);

    if (nullptr == window)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();

        return EXIT_FAILURE;
    }

    glfwMakeContextCurrent(window);
    glewExperimental = GL_TRUE;

    if (GLEW_OK != glewInit())
    {
        std::cout << "Failed to initialize GLEW" << std::endl;
        return EXIT_FAILURE;
    }

    // Define the viewport dimensions
    glViewport(0, 0, screenWidth, screenHeight);
    glEnable(GL_DEPTH_TEST);

    //added task 2 
    glDepthFunc(GL_LEQUAL);
    glDisable(GL_CULL_FACE);
    glCullFace(GL_BACK);


    
    Shader heightMapShader("cpuheightVertex.vs", "cpuheightFrag.fs");//intialzing fragment shader found in the source file 

    stbi_set_flip_vertically_on_load(true);
    int width, height, nChannels;
    unsigned char* data = stbi_load("resource folder/render(2).png", //intialzing heightmap image 
        &width, &height, &nChannels,
        0);

    std::vector<float> vertices;
    float yScale = 64.0f / 256.0f, yShift = 16.0f;
    int rez = 1;
    unsigned bytePerPixel = nChannels;
    for (int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            unsigned char* pixelOffset = data + (j + width * i) * bytePerPixel;
            unsigned char y = pixelOffset[0];

            // vertex
            vertices.push_back(-height / 2.0f + height * i / (float)height);  
            vertices.push_back((int)y * yScale - yShift);   
            vertices.push_back(-width / 2.0f + width * j / (float)width);   
        }
    }
    stbi_image_free(data);

    std::vector<unsigned> indices;
    for (unsigned i = 0; i < height - 1; i += rez)
    {
        for (unsigned j = 0; j < width; j += rez)
        {
            for (unsigned k = 0; k < 2; k++)
            {
                indices.push_back(j + width * (i + k * rez));
            }
        }
    }
    std::cout << "Loaded " << indices.size() << " indices" << std::endl;

    const int numStrips = (height - 1) / rez;
    const int numTrisPerStrip = (width / rez) * 2 - 2;
    std::cout << "Created lattice of " << numStrips << " strips with " << numTrisPerStrip << " triangles each" << std::endl;
    std::cout << "Created " << numStrips * numTrisPerStrip << " triangles total" << std::endl;

    // first, configure the cube's VAO (and terrainVBO + terrainIBO)
    unsigned int terrainVAO, terrainVBO, terrainIBO;
    glGenVertexArrays(1, &terrainVAO);
    glBindVertexArray(terrainVAO);

    glGenBuffers(1, &terrainVBO);
    glBindBuffer(GL_ARRAY_BUFFER, terrainVBO);
    glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(float), &vertices[0], GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glGenBuffers(1, &terrainIBO);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, terrainIBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned), &indices[0], GL_STATIC_DRAW);





    //Set up chessboard


    cb.compileShaders();
    cb.generate1();
    cb.generate2();



    // Game loop until the user presses exit
    while (!glfwWindowShouldClose(window))
    {

        processInput(window);

        glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        heightMapShader.use();

        // view/projection transformations
        glm::mat4 projection = glm::perspective(glm::radians(camera.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100000.0f);
        glm::mat4 view = camera.GetViewMatrix();
        heightMapShader.setMat4("projection", projection);
        heightMapShader.setMat4("view", view);

        // world transformation
        glm::mat4 model = glm::mat4(1.0f);
        heightMapShader.setMat4("model", model);

        //draw terrain
        glBindVertexArray(terrainVAO);
        for (unsigned strip = 0; strip < numStrips; strip++)
        {
            glDrawElements(GL_TRIANGLE_STRIP,   // primitive type
                numTrisPerStrip + 2,   // number of indices to render
                GL_UNSIGNED_INT,     // index data type
                (void*)(sizeof(unsigned) * (numTrisPerStrip + 2) * strip)); // offset to starting index
        }

        glBindVertexArray(0);



        //Draw Chessboard
        glUseProgram(cb.getShaderProgram());


        glm::mat4 model2 = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
        glm::mat4 view2 = glm::mat4(1.0f);
        glm::mat4 projection2 = glm::mat4(1.0f);
        model2 = glm::rotate(model2, glm::radians(-55.0f), glm::vec3(1.0f, 0.3f, 0.5f));
        view2 = glm::lookAt(cb.getCameraPosition(), glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3(0.0f, 1.0f, 0.0f));
        projection2 = glm::perspective(glm::radians(45.0f), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);

        glm::mat4 mvp = projection2 * view2 * model2;

        unsigned int matricID = glGetUniformLocation(cb.getShaderProgram(), "MVP");
        glUniformMatrix4fv(matricID, 1, GL_FALSE, &mvp[0][0]);



        for (int i = 0; i < 85; i++)
        {
            glBindVertexArray(cb.getVertexArrayIds()[i]);
            glDrawArrays(GL_TRIANGLES, 0, 36);
        }
        glBindVertexArray(cb.getVertexArrayIds()[85]);
        glDrawArrays(GL_TRIANGLES, 0, 36);

        glUseProgram(cb.getShaderProgram());

        Pawn();
        Rook();
        Queen();
        King();
        Bishop();
        Knight();

        glfwSwapBuffers(window);
        glfwPollEvents();

        ++process_counter;

        if (process_counter == 8) {
            process_counter = 0;
        }

    }


    glfwTerminate();

    return EXIT_SUCCESS;
}

/*void key_callback(GLFWwindow* window, int key, int scancode, int action, int modifiers)
{
    if (action == GLFW_PRESS)
    {
        switch (key)
        {
        case GLFW_KEY_RIGHT:
            //cb.setNewCameraPosition();
            break;
        default:
            break;
        }
    }
}*/


void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);

    if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
        cb.setNewCameraPosition(process_counter);

}
